%% Code for calculating the self-resonant frequency (SRF) of solenoid coils

%  Created by Wenshen Zhou on 14 Apr 2019

%  Introduction:
%  The code can be used for calculating the SRF of solenoid coils of
%  irregular solenoids, including normal tightly-wound cylindrical
%  solenoid, sparsely-wound cylindrical solenoid, cylindrical solenoid
%  with non-uniform pitches, and non-cylindrical solenoids. Inductance (L)
%  and capacitance (C) are calculated individually, then the SRF is
%  calculated as 1/(2*pi*sqrt(L*C)). The methods for calculating L and C
%  are illustrated in the paper: W. Zhou, and S. Y. Huang, "An accurate 
%  model for fast calculating the resonant frequency of an irregular 
%  solenoid".

clear all
close all
clc

tic

N = 4;               % No. of turns of the solenoid
pitch_range = 0.015; % pitch of the solenoid, only applicable for soelnoids with uniform-pitches
% pitch_range = 0.01:0.01:0.07;   % for calculating a series of solenoids with different pitches
f1 = 1e3;            % frequecy for calculating inductance, a low f1 is usually used.

L_separate = zeros(length(pitch_range),N);    % inductance of each turns
Res_r = zeros(length(pitch_range));           % resistance of the solenoid


mu_0 = 4*pi*10^-7;
epsilon_0 = 8.854187817e-12;
mu_r = 1;
rho = 1.72e-8;           % resistivity of copper
sigma = 5.96e7;          % conductivity of copper
r_w = 1.024e-3/2;        % radius of wire
d = 2*r_w;               % diameter of wire
h = waitbar(0,'Please wait...');
radius = 0.04;           % radius of coil, only applicable for cylindrical solenoids
D = 2*radius;            % diameter of coil

tic;
for i_p = 1:length(pitch_range)
    
    pitch = pitch_range(i_p);
    l_coil(i_p) = N*sqrt((2*pi*radius)^2+pitch^2);    % length of the wire of the solenoid
    height = N*pitch;                                 % height of the solenoid

    %% Calculation of resistance of the solenoid
    f_cc = 4/(pi*mu_r*mu_0*sigma*r_w^2);
    f_r1 = [];
    f_r2 = [];
    for li = 1:length(f1)
        if f1(li) <= f_cc
            f_r1 = [f_r1 f1(li)];
        else
            f_r2 = [f_r2 f1(li)];
        end
    end
    delta_r2 = sqrt(rho./(pi.*f_r2*mu_r*mu_0));
    r_r1 = 1/(sigma*pi*r_w^2)*ones(1,length(f_r1));
    r_r2 = 1./(sigma*pi.*(r_w^2-(r_w-delta_r2).^2));
    Res_r(i_p) = [r_r1 r_r2]*l_coil(i_p)/N;           % Resistance of one loop
    L_int = mu_0*(l_coil(i_p)/N)/(8*pi);              % Internal inductance of the solenoid
    
    
    %% Calculation of inductance of the solenoid
    T = 1/f1;           % period                                
    speed = 3e8;        % speed of EM wave
    s = 200;            % No. of segments
    lambda = speed/f1;  % wavelength at frequency f1
    phi0 = 0;           % initial phase
    
    % Define the solenoid using parametric equations
    n = 0;
    for t = -N*pi:2*N*pi/s:N*pi
        n = n+1;
        
        %%%% for cylindrical helix
        coil(n,1) = radius*cos(t);    % X coordinate of point n
        coil(n,2) = radius*sin(t);    % Y coordinate of point n
        coil(n,3) = pitch*t/(2*pi);   % Z coordinate of point n
        
        %%%% for spherical helix
%         coil(n,1) = radius*cos(t/10)*cos(t);      % X coordinate of point n
%         coil(n,2) = radius*cos(t/10)*sin(t);      % Y coordinate of point n
%         coil(n,3) = radius*sin(t/10);             % Z coordinate of point n
    end
    dl = coil(2:s+1, :) - coil(1:s, :);           % vectors of the coil segments
      
    % Current at each segment
    time = 0;
    l = 0;
    Ic(1) = 1;
    for ic = 2:s
        l = l + abs(dl(ic-1));
        Ic(ic) = cos(2*pi*f1*time-l/lambda+phi0);
    end
    
    B = [0 0 0];
    n = 0;
    step = 0.002;                           % mesh size
    % calculation domain in x, y, and z direction
    x_start = -0.048;
    x_stop = 0.048;
    x_span = (x_stop-x_start)/step+1;
    y_start = -0.048;
    y_stop = 0.048;
    y_span = (y_stop-y_start)/step+1;
    z_start = -0.042;
    z_stop = 0.042;
    z_span = (z_stop-z_start)/step+1;
    
    % Calculate the B field generated by the solenoid coil with Biot-Savart Law
    for x = x_start:step:x_stop
        n = n+1;
        m = 0;
        l = 0;
        for y = y_start:step:y_stop
            m = m+1;
            l = 0;
            for z = z_start:step:z_stop
                l = l+1;
                [B_mag(n,m,l) Bz(n,m,l)]= calculateB(x, y, z, s, Ic, coil, dl);
            end
        end
    end
    
    
    t1 = -(N-1)*pi:2*pi:(N-1)*pi;   % the parameter corresponding to the transverse middle plane
    z_O = pitch*t1/(2*pi);              % for cylindrical solenoids
%     z_O = radius*sin(t1/10);        % for spherical solenoids
    z1 = zeros(x_span,y_span,N);    % z-coordinates of the points on calculation surface
    z3_plot = zeros(x_span,y_span);  
    
    B_map = zeros(x_span,y_span,N); % matrix to decide whether a point is inside the coil, 1->'yes', 0->'no' 
    
    % Calculate the z-coordinates of the points on calculation surface
    for k = 1:N
        n = 0;
        for x = x_start:step:x_stop
            n = n+1;
            m = 0;
            for y = y_start:step:y_stop
                m = m+1;
                if x==0 && y==0
                    theta = pi + (k-(N-1))*2*pi;
                elseif y>=0
                    theta = acos(x/sqrt(x^2+y^2)) + (k-(N-1))*2*pi;
                else
                    theta = acos(-x/sqrt(x^2+y^2))+ pi + (k-(N-1))*2*pi;
                end
                
                Rc = radius;                    % for cylindrical solenoid
                % Rc = radius*cos(theta/10);    % for spherical solenoid
             
                if x^2+y^2<=(Rc-r_w)^2
                    B_map(n,m,k) = 1;
                    z_R1 = pitch*theta/(2*pi);      % for cylindrical solenoid
                    % z_R1 = radius*sin(theta/10);  % for spherical solenoid
                    z1(n,m,k) = (z_R1-z_O(k))*sqrt(x^2+y^2)/Rc+z_O(k);
                else
                    B_map(n,m,k) = 0;
                end
            end
        end
    end
    
    % plot the calculation surface of the 4th loop
    figure(1)
    z1_plot = z1(:,:,4);
    x_plot = x_start:step:x_stop;
    y_plot = y_start:step:y_stop;
    [xx yy] = meshgrid(x_plot,y_plot);
    surf(yy,xx,z1_plot);
    colorbar;
    xlabel('x (m)');
    ylabel('y (m)');
    colormap jet;
    hold on;
    t_plot = 2*pi:2*pi/200:4*pi;                        % plot the coil
    % for cylindrical solenoid
    xt_plot = radius*cos(t_plot);
    yt_plot = radius*sin(t_plot);
    zt_plot = pitch*t_plot/(2*pi);
    
%     % for spherical solenoid
%     xt_plot = radius*cos(t_plot/10).*cos(t_plot);
%     yt_plot = radius*cos(t_plot/10).*sin(t_plot);
%     zt_plot = radius*sin(t_plot/10);

    plot3(xt_plot, yt_plot, zt_plot, 'y-','Linewidth',4);
    set(gca,'fontsize',14);

    Area = pi*Rc.^2;                % area of the transverse-middle-planes
    phi_area = zeros(1,N);          % magnetic flux of single calculation surfaces
    phi_total = 0;                  % total magnetic flux
    L_total = 0;                    % total inductance
    B_area = zeros(x_span,y_span,N);% B field of single calculation surfaces
    
    
    
    for k = 1:N
        % Calculate the magnetic flux at all the calculation surfaces
        for n = 1:x_span
            for m = 1:y_span
                for iz = 1:z_span
                    z(iz) = z_start + step*(iz-1);
                    if z(iz)>=z1(n,m,k)
                        B_area(n,m,k) = Bz(n,m,iz);
                        break;
                    end
                end
                if B_map(n,m,k) == 1
                    phi_area(k) = phi_area(k) + B_area(n,m,k)*step^2;
                end
            end
        end
        
        % Calculate the inductance of each loop
        Ic_area(k) = Ic((2*k-1)*s/(2*N)+1);             % current at the middle segment of each loop
        L_separate(i_p,k) = phi_area(k)/Ic_area(k);     % inductance of each loop
        L_total = L_total+L_separate(i_p,k)+L_int;      % total capacitance of the solenoid
        phi_total = phi_total + phi_area(k);
    end
    
    L(i_p) = L_total;
    
    
    %% Calculation of capacitance of the solenoid
    % for cylindrical solenoid with uniform pitches
    C(i_p) = epsilon_0*pi^2*D/(acosh(pitch/d))/(N-1)+epsilon_0*pi^2*D/(acosh(2*pitch/d))/(N-2);
    
    
%     % example for a 4-turn spherical solenoid
%     n2 = 0;
%     for t2 = -3*pi:2*pi:3*pi          % corresponding to the transverse-middle plane
%         n2 = n2 + 1;
%         Rc_s(n2) = radius*cos(t2/10);   % radius of circle in xy-plane
%     end
%     R12 = 1/2 * (Rc_s(1) + Rc_s(2));      % radius of the circle in the middle of 1st loop and 2nd loop
%     R23 = 1/2 * (Rc_s(2) + Rc_s(3));
%     R34 = 1/2 * (Rc_s(3) + Rc_s(4));
%     R13 = 1/2 * (Rc_s(1) + Rc_s(3));
%     R24 = 1/2 * (Rc_s(2) + Rc_s(4));
%     Sph_position = zeros(5,3);
%     Sph_position(1,:) = coil(1,:);
%     Sph_position(2,:) = coil(1+s/N,:);
%     Sph_position(3,:) = coil(1+2*s/N,:);
%     Sph_position(4,:) = coil(1+3*s/N,:);
%     Sph_position(5,:) = coil(4*s/N,:);
%     p12 = 1/2 * (norm(Sph_position(2)-(Sph_position(1)))+norm(Sph_position(3)-(Sph_position(2))));   % pitch between 1st and 2nd loop
%     p23 = 1/2 * (norm(Sph_position(3)-(Sph_position(2)))+norm(Sph_position(4)-(Sph_position(3))));
%     p34 = 1/2 * (norm(Sph_position(4)-(Sph_position(3)))+norm(Sph_position(5)-(Sph_position(4))));
%     p13 = 1/2 * (norm(Sph_position(3)-(Sph_position(1)))+norm(Sph_position(4)-(Sph_position(2))));
%     p24 = 1/2 * (norm(Sph_position(4)-(Sph_position(2)))+norm(Sph_position(5)-(Sph_position(3))));
%     C_sph_12 = 2*epsilon_0*pi^2*R12/(acosh(p12/d));    % capacitance between 1st and 2nd loop
%     C_sph_23 = 2*epsilon_0*pi^2*R23/(acosh(p23/d));
%     C_sph_34 = 2*epsilon_0*pi^2*R34/(acosh(p34/d));
%     C_sph_13 = 2*epsilon_0*pi^2*R13/(acosh(p13/d));
%     C_sph_24 = 2*epsilon_0*pi^2*R24/(acosh(p24/d));
%     
%     C(i_p) = 1/(1/C_sph_12+1/C_sph_23+1/C_sph_34) + 1/(1/C_sph_13+1/C_sph_24);

    %% Calculation of SRF
    f_res(i_p) = 1/(2*pi*sqrt(L(i_p)*C(i_p)));
    
    
    waitbar(i_p/length(pitch_range),h);
end

toc
